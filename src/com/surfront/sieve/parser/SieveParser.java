/* Generated By:JavaCC: Do not edit this line. SieveParser.java */
package com.surfront.sieve.parser;

import java.util.*;
import com.surfront.sieve.*;

public class SieveParser<T> implements SieveParserConstants {
    protected SieveContext<T> context;

    public SieveContext<T> getSieveContext() {
        return context;
    }

    public void setSieveContext(SieveContext<T> context) {
        this.context = context;
    }

  final public Command<T>[] start() throws ParseException {
    Command<T>[] commands;
    try {
      commands = commands();
      jj_consume_token(0);
            {if (true) return commands;}
    } catch (TokenMgrError e) {
        {if (true) throw new ParseException("TokenMgrError: " + e.getMessage());}
    }
    throw new Error("Missing return statement in function");
  }

  final public Command<T>[] commands() throws ParseException {
    List<Command<T>> commands = new LinkedList<Command<T>>();
    Command<T> command;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      command = command();
            commands.add(command);
    }
        {if (true) return commands.toArray(new Command[0]);}
    throw new Error("Missing return statement in function");
  }

  final public Command<T> command() throws ParseException {
    String type;
    Test<T> test = null;
    Command<T>[] block;
    Argument[] arguments;
    type = identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case 19:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        test = test();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      block = block();
            {if (true) return context.getCommand(type, test, block);}
      break;
    case NUMBER:
    case TAG:
    case STRING:
    case 18:
    case 24:
      arguments = arguments();
      jj_consume_token(18);
            {if (true) return context.getCommand(type, arguments);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Command<T>[] block() throws ParseException {
    Command<T>[] commands;
    jj_consume_token(19);
    commands = commands();
    jj_consume_token(20);
        {if (true) return commands;}
    throw new Error("Missing return statement in function");
  }

  final public Test<T> test() throws ParseException {
    String type;
    Argument[] arguments;
    Test<T> test;
    Test<T>[] tests;
    type = identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      test = test();
            {if (true) return context.getTest(type, test);}
      break;
    case 21:
      tests = testlist();
            {if (true) return context.getTest(type, tests);}
      break;
    default:
      jj_la1[3] = jj_gen;
      arguments = arguments();
            {if (true) return context.getTest(type, arguments);}
    }
    throw new Error("Missing return statement in function");
  }

  final public Test<T>[] testlist() throws ParseException {
    List<Test<T>> tests = new ArrayList<Test<T>>();
    Test<T> test;
    jj_consume_token(21);
    test = test();
            tests.add(test);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 22:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(22);
      test = test();
            tests.add(test);
    }
    jj_consume_token(23);
        {if (true) return tests.toArray(new Test[0]);}
    throw new Error("Missing return statement in function");
  }

  final public Argument[] arguments() throws ParseException {
    List<Argument> arguments = new ArrayList<Argument>();
    Argument argument;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case TAG:
      case STRING:
      case 24:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      argument = argument();
            arguments.add(argument);
    }
        {if (true) return arguments.toArray(new Argument[0]);}
    throw new Error("Missing return statement in function");
  }

  final public Argument argument() throws ParseException {
    Object o;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case 24:
      o = stringlist();
            {if (true) return new StringArgument((String[]) o);}
      break;
    case NUMBER:
      o = number();
            {if (true) return new NumberArgument((String) o);}
      break;
    case TAG:
      o = tag();
            {if (true) return new TagArgument((String) o);}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String[] stringlist() throws ParseException {
    String value;
    String[] values;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      value = string();
            {if (true) return new String[] { value };}
      break;
    case 24:
      values = strings();
            {if (true) return values;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String[] strings() throws ParseException {
    List<String> values = new ArrayList<String>();
    String value;
    jj_consume_token(24);
    value = string();
            values.add(value);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 22:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      jj_consume_token(22);
      value = string();
            values.add(value);
    }
    jj_consume_token(25);
        {if (true) return values.toArray(new String[0]);}
    throw new Error("Missing return statement in function");
  }

  final public String tag() throws ParseException {
    Token token;
    token = jj_consume_token(TAG);
        {if (true) return token.image.substring(1).toLowerCase();}
    throw new Error("Missing return statement in function");
  }

  final public String number() throws ParseException {
    Token token;
    token = jj_consume_token(NUMBER);
        {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

  final public String string() throws ParseException {
    Token token;
    token = jj_consume_token(STRING);
        {if (true) return StringArgument.unquote(token.image.substring(1, token.image.length() - 1));}
    throw new Error("Missing return statement in function");
  }

  final public String identifier() throws ParseException {
    Token token;
    token = jj_consume_token(IDENTIFIER);
        {if (true) return token.image.toLowerCase();}
    throw new Error("Missing return statement in function");
  }

  public SieveParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x1000,0x1000,0x10c7800,0x201000,0x400000,0x1006800,0x1006800,0x1004000,0x400000,};
   }

  public SieveParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public SieveParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SieveParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  public SieveParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SieveParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  public SieveParser(SieveParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  public void ReInit(SieveParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[26];
    for (int i = 0; i < 26; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
